<main>
    <h1>{{title}}</h1>
    <button id='add-ingredient-btn'>Add New Ingredient</button>
    <table>
        <thead>
            <tr>
                <th>Ingredient ID</th>
                <th>Ingredient Name</th>
                <th>Unit ID</th>
                <th>Price Per Unit</th>
            </tr>
        </thead>
        <tbody>
            {{#each users}}
                <tr>
                    <td>{{this.ingredient_id}}</td>
                    <td>{{this.name}}</td>
                    <td>{{this.unit_id}}</td>
                    <td>{{this.price_per_unit}}</td>
                    <td><button class='edit-btn'>Edit</button></td>
                    <td><button class='del-btn'>Delete</button></td>
                </tr>
            {{/each}}
        </tbody>
    </table>

    <dialog id="add-ingredient-modal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <span>Add Ingredient</span>
            <span class="close">&times;</span>
        </div>
        <form id="add-ingredient-form">
            <label for="name">Ingredient Name:</label>
            <input type="text" id="name" name="name"><br>

            <label for="unit">Unit:</label>
            <select id="unit" name="unit">
                <option disabled>Select a unit</option>
                <option value="lb">lb</option>
                <option value="oz">oz</option>
                <option value="tsp">tsp</option>
                <option value="tbsp">tbsp</option>
            </select>

            <label for="price">Price per Unit:</label>
            <input type="text" id="price" name="price"><br>

            <label>Dietary Restrictions:</label>
            <div class="flex gap">
                <input type="checkbox" id="veg" name="veg" value="Vegetarian" />
                <label for="non-veg">Vegetarian Friendly</label><br>
            </div>
            <div class="flex gap">
                <input type="checkbox" id="vegan" name="vegan" value="Vegan" />
                <label for="non-veg">Vegan Friendly</label><br>
            </div>

            <input type="submit" value="Add">
        </form>
    </div>
</dialog>

    <dialog id='edit-ingredient-modal' class='modal'>
        <div class='modal-content'>
            <div class='modal-header'>
                <span>Edit Unit</span>
                <span class='close'>&times;</span>
            </div>
            <form id='edit-ingredient-form'>
                <input type='hidden' id='edit-unit-id' name='unit-id' />
                <label for='name'>Name:</label>
                <input type='text' id='edit-unit-name' name='name' /><br />
                <input type='submit' value='Update' />
            </form>
        </div>
    </dialog>

    <dialog id='delete-unit-modal' class='modal'>
        <div class='modal-content'>
            <div class='modal-header'>
                <span class='close'>&times;</span>
            </div>
            <div class='flex justify-center'>
                <span>Are you sure you want to delete this ingredient?</span>
            </div>
            <div class='flex gap justify-center'>
                <button>Cancel</button>
                <button>Confirm</button>
            </div>
        </div>
    </dialog>
</main>

<script>
// Elements
const addIngredientModal = document.getElementById('add-ingredient-modal');
const addIngredientForm = document.getElementById('add-ingredient-form');
const deleteIngredientModal = document.getElementById('delete-unit-modal');
const editIngredientModal = document.getElementById('edit-ingredient-modal');
const editIngredientForm = document.getElementById('edit-ingredient-form');

let ingredientId; // Variable to hold the current Ingredient ID.

// Event handlers
document.querySelector('#add-ingredient-btn').addEventListener('click', () => addIngredientModal.showModal());

// Close modals when clicking 'x' or 'Cancel'
for (let modal of [addIngredientModal, deleteIngredientModal, editIngredientModal]) {
  modal.querySelector('.close').addEventListener('click', () => modal.close());
}

// Handle all ingredient actions
document.addEventListener('click', (event) => {
  const row = event.target.closest('tr');
  if (!row) return;

  ingredientId = row.children[0].textContent;
  if (event.target.classList.contains('edit-btn')) {
    document.getElementById('edit-unit-name').value = row.children[1].textContent;
    editIngredientModal.showModal();
  } else if (event.target.classList.contains('del-btn')) {
    deleteIngredientModal.showModal();
  }
});

// Form submissions
addIngredientForm.addEventListener('submit', handleCreateIngredient);
editIngredientForm.addEventListener('submit', handleUpdateIngredient);

deleteIngredientModal.querySelector('button:nth-child(1)').addEventListener('click', () => deleteIngredientModal.close());
deleteIngredientModal.querySelector('button:nth-child(2)').addEventListener('click', handleDeleteIngredient);

// Fetch requests
async function handleCreateIngredient(event) {
  event.preventDefault();

  const formData = new FormData(event.target);
  const ingredientData = Object.fromEntries(formData);

  await fetch('/ingredients', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(ingredientData),
  });

  addIngredientModal.close();
  location.reload();
}

async function handleUpdateIngredient(event) {
  event.preventDefault();

  const response = await fetch(`/ingredients/${ingredientId}`, {
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      nameInput: document.getElementById('edit-unit-name').value,
    }),
  });

  if (response.ok) {
    editIngredientModal.close();
    location.reload();
  }
}

async function handleDeleteIngredient() {
  await fetch(`/ingredients/${ingredientId}`, { method: 'DELETE' });

  deleteIngredientModal.close();
  location.reload();
}
</script>